# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up cloud-init script
      id: cloud-init
      run: |
        echo "::set-output name=cloud_init_script::$(cat <<'EOF'
        #cloud-config
        packages:
          - curl
        users:
          - name: cluster
            ssh-authorized-keys:
              - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+Pc1AiJeBMPTwbgYRFVwrlJzClUOUNcC6Cvd3lkM07VioiZTEHOgFGqfa+Gfwhd8Lb8SoxM8Os0jElEAtG5Bs9lkTkN015QjOy/raBf3Jo0dgEEdUy3ZK2z3ExhUFyiHunfnDi9eSBps6SiICjxNDbGKB6vTojSYVfqdbqLH6n+L+SrB94T4Tk+SvtDaLO7QtqA3EeEvI70D6LBRWLc+6e0i+Fz8IWnEHJiJETHgYpJdd3HR5rXWJuUxQdF7a/wKkZDZkXE6mHof08cZ60LwCclylLKKsVqIyppMVmcYRrOfO5hVa5iPASYOOICshiqvwn2ugTIbMUow6cd82oGL2AkqQFTz6F1wwzufvPQsp0E3X0QIGSO36Ux3+BeY7dC2t1aCxzMkzAcNTGvZ4ez+6pxiclO5Awa+SfvFl3VgO6xuI2tkDnT/fH513LF2oiQArAq7TLYIX6MPJWqfv617RnT2woQItwJ7nqkH8ugeFqMmdBgxISAke+1r4mnVeiLk=
              - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCq5wk355yc/H0aqsYIf6xl7GFhjWofMRkzTcAHi9llFMAj+bMnHj1rJYZcQPlrtQ5OzniJ3AxhI/gbJiHb1sPEjNNReR4xwO+DF/wmLgHWTupwKXuidNEXVj9P60x+sBDVee5IvTPdygBgMaRQAWqI7aBL9XU1dHCaqRjAm0LBvE3LEuezNcHFA9YsF+4RNUugQ80O8et1BbQIypmRsx2TtbLB1hrvaYr62HsHFCq/teWxHwL4fy2tyMW5kF0aWJWauzK/TxTcNbOvvhdFFQCsYOo1ByETdVT9jmxIPklH88TiMR49oR9pVinYNUrG5GKSCH9iJJuRRtfWhFmX+YfsPnN/2CG+T+tqNzuWqI7PtEYLQF9EEh0ivFki9ab6aAww+fz2pTbNKEgWTfARH+mlogq5gz9Tg7buh2gomVuKFNaw6OcmLdFru7FTnDALKtUNiX276Y4nnrbXCplm4VDRMcT0pW+8b0XMX8ikYq6/hYaVOfpvQKnUcJ4QW+2MZn8=
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
        runcmd:
          - apt-get update -y
          - curl https://get.k3s.io | INSTALL_K3S_EXEC="--disable traefik" sh -
          - chown cluster:cluster /etc/rancher/k3s/k3s.yaml
          - chown cluster:cluster /var/lib/rancher/k3s/server/node-token
        EOF
        )"

    - name: Set up cloud-init-worker script
      id: cloud-init-worker
      run: |
        echo "::set-output name=cloud_init_worker_script::$(cat <<EOF
        #cloud-config
        users:
          - name: cluster
            ssh-authorized-keys:
              - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+Pc1AiJeBMPTwbgYRFVwrlJzClUOUNcC6Cvd3lkM07VioiZTEHOgFGqfa+Gfwhd8Lb8SoxM8Os0jElEAtG5Bs9lkTkN015QjOy/raBf3Jo0dgEEdUy3ZK2z3ExhUFyiHunfnDi9eSBps6SiICjxNDbGKB6vTojSYVfqdbqLH6n+L+SrB94T4Tk+SvtDaLO7QtqA3EeEvI70D6LBRWLc+6e0i+Fz8IWnEHJiJETHgYpJdd3HR5rXWJuUxQdF7a/wKkZDZkXE6mHof08cZ60LwCclylLKKsVqIyppMVmcYRrOfO5hVa5iPASYOOICshiqvwn2ugTIbMUow6cd82oGL2AkqQFTz6F1wwzufvPQsp0E3X0QIGSO36Ux3+BeY7dC2t1aCxzMkzAcNTGvZ4ez+6pxiclO5Awa+SfvFl3VgO6xuI2tkDnT/fH513LF2oiQArAq7TLYIX6MPJWqfv617RnT2woQItwJ7nqkH8ugeFqMmdBgxISAke+1r4mnVeiLk=
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
        
        write_files:
          - path: /root/.ssh/id_rsa
            content: |
              -----BEGIN OPENSSH PRIVATE KEY-----
              ${WORKER_PRIVATE_SSH_KEY}
              -----END OPENSSH PRIVATE KEY-----
            permissions: "0600"
        
        runcmd:
          - apt-get update -y
          - until curl -k https://10.0.1.1:6443; do sleep 5; done
          - REMOTE_TOKEN=$(ssh -o StrictHostKeyChecking=accept-new cluster@10.0.1.1 sudo cat /var/lib/rancher/k3s/server/node-token)
          - curl -sfL https://get.k3s.io | K3S_URL=https://10.0.1.1:6443 K3S_TOKEN=$REMOTE_TOKEN sh -
        EOF
        )"

      env:
        WORKER_PRIVATE_SSH_KEY: ${{ secrets.WORKER_PRIVATE_SSH_KEY }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    #- name: Setup Terraform
    #  uses: hashicorp/setup-terraform@v1
    #  with:
    #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
        CLOUD_INIT_SCRIPT: ${{ steps.cloud-init.outputs.cloud_init_script }}
        CLOUD_INIT_WORKER_SCRIPT: ${{ steps.cloud-init-worker.outputs.cloud_init_worker_script }}
      run: |
          echo "${CLOUD_INIT_SCRIPT}" > cloud-init.yaml
          terraform plan -var "hcloud_token=${HCLOUD_TOKEN}" -var "cloud_init_script=${CLOUD_INIT_SCRIPT}" -var "cloud_init_worker_script=${CLOUD_INIT_WORKER_SCRIPT}" -input=false
  
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
